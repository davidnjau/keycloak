version: '3.8'

volumes:
  keycloak-postgres:
  redis_data:
  spring-postgres:
  grafana-data:
  pgadmin_data:

networks:
  app_network:
    driver: bridge

services:
  keycloak-postgres:
    image: ${POSTGRES_IMAGE}
    container_name: ${KEYCLOAK_POSTGRES_CONTAINER_NAME}
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    networks:
      - app_network
    environment:
      POSTGRES_USER: ${KEYCLOAK_DB_USER}
      POSTGRES_DB: ${KEYCLOAK_DB_NAME}
      POSTGRES_PASSWORD: ${KEYCLOAK_DB_PASSWORD}

    volumes:
      - keycloak-postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${KEYCLOAK_DB_USER} -d ${KEYCLOAK_DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 5

  keycloak:
    image: ${KC_IMAGE}
    container_name: ${KC_CONTAINER_NAME}
    entrypoint: [ "sh", "-c" ]
    command: >
      "/opt/keycloak/wait-for-it.sh keycloak-postgres:5432 --
      /opt/keycloak/bin/kc.sh start-dev --import-realm"
    environment:
      KC_DB: ${KC_DB}
      KC_DB_URL: ${KC_DB_URL}
      KC_DB_USERNAME: ${KEYCLOAK_DB_USER}
      KC_DB_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
      KC_HOSTNAME: ${KC_HOSTNAME}
      KEYCLOAK_ADMIN: ${KC_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KC_ADMIN_PASSWORD}
    ports:
      - "${KC_PORT}:8080"
    depends_on:
      keycloak-postgres:
        condition: service_healthy
    networks:
      - app_network
    volumes:
      - ./keycloak_realm.json:/opt/keycloak/data/import/keycloak_realm.json
      - ./wait-for-it.sh:/opt/keycloak/wait-for-it.sh:ro
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8080/health || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5

  redis-vector:
    image: ${REDIS_IMAGE}
    container_name: ${REDIS_CONTAINER_NAME}
    ports:
      - "${REDIS_PORT}:6379"      # Redis
      - "${REDIS_WEB_PORT}:8001" # RedisInsight UI
    volumes:
      - redis_data:/data
    environment:
      - REDIS_ARGS=--save 900 1
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  spring-postgres:
    image: ${POSTGRES_IMAGE}
    container_name: ${SPRING_POSTGRES_CONTAINER_NAME}
    environment:
      POSTGRES_DB: ${SPRING_DB_NAME}
      POSTGRES_USER: ${SPRING_DB_USER}
      POSTGRES_PASSWORD: ${SPRING_DB_PASSWORD}
    volumes:
      - spring-postgres:/var/lib/postgresql/data
    ports:
      - "${SPRING_POSTGRES_PORT}:5432"   # exposed for local dev
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${SPRING_DB_USER} -d ${SPRING_DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 5

  prometheus:
    image: ${PROMETHEUS_IMAGE}
    container_name: ${PROMETHEUS_CONTAINER_NAME}
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT}:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - app_network

  grafana:
    image: ${GRAFANA_IMAGE}
    container_name: ${GRAFANA_CONTAINER_NAME}
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - app_network

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin123
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "7006:80"
    networks:
      - app_network
